{"version":3,"sources":["canvasPreview.ts","App.tsx","index.tsx"],"names":["TO_RADIANS","Math","PI","canvasPreview","image","canvas","crop","scale","rotate","ctx","getContext","Error","scaleX","naturalWidth","width","scaleY","naturalHeight","height","pixelRatio","window","devicePixelRatio","floor","imageSmoothingQuality","cropX","x","cropY","y","rotateRads","centerX","centerY","save","translate","drawImage","restore","centerAspectCrop","mediaWidth","mediaHeight","aspect","centerCrop","makeAspectCrop","unit","App","fn","waitTime","deps","useState","imgSrc","setImgSrc","previewCanvasRef","useRef","imgRef","setCrop","completedCrop","setCompletedCrop","setScale","setRotate","setAspect","current","useEffect","t","setTimeout","apply","undefined","clearTimeout","className","type","accept","onChange","e","target","files","length","reader","FileReader","addEventListener","result","toString","readAsDataURL","htmlFor","id","step","value","disabled","Number","min","max","onClick","Boolean","_","percentCrop","onComplete","c","ref","alt","src","style","transform","onLoad","currentTarget","border","objectFit","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.6f08b389.chunk.js","sourcesContent":["import { PixelCrop } from 'react-image-crop'\n\nconst TO_RADIANS = Math.PI / 180\n\nexport async function canvasPreview(\n  image: HTMLImageElement,\n  canvas: HTMLCanvasElement,\n  crop: PixelCrop,\n  scale = 1,\n  rotate = 0,\n) {\n  const ctx = canvas.getContext('2d')\n\n  if (!ctx) {\n    throw new Error('No 2d context')\n  }\n\n  const scaleX = image.naturalWidth / image.width\n  const scaleY = image.naturalHeight / image.height\n  // devicePixelRatio slightly increases sharpness on retina devices\n  // at the expense of slightly slower render times and needing to\n  // size the image back down if you want to download/upload and be\n  // true to the images natural size.\n  const pixelRatio = window.devicePixelRatio\n  // const pixelRatio = 1\n\n  canvas.width = Math.floor(crop.width * scaleX * pixelRatio)\n  canvas.height = Math.floor(crop.height * scaleY * pixelRatio)\n\n  ctx.scale(pixelRatio, pixelRatio)\n  ctx.imageSmoothingQuality = 'high'\n\n  const cropX = crop.x * scaleX\n  const cropY = crop.y * scaleY\n\n  const rotateRads = rotate * TO_RADIANS\n  const centerX = image.naturalWidth / 2\n  const centerY = image.naturalHeight / 2\n\n  ctx.save()\n\n  // 5) Move the crop origin to the canvas origin (0,0)\n  ctx.translate(-cropX, -cropY)\n  // 4) Move the origin to the center of the original position\n  ctx.translate(centerX, centerY)\n  // 3) Rotate around the origin\n  ctx.rotate(rotateRads)\n  // 2) Scale the image\n  ctx.scale(scale, scale)\n  // 1) Move the center of the image to the origin (0,0)\n  ctx.translate(-centerX, -centerY)\n  ctx.drawImage(\n    image,\n    0,\n    0,\n    image.naturalWidth,\n    image.naturalHeight,\n    0,\n    0,\n    image.naturalWidth,\n    image.naturalHeight,\n  )\n\n  ctx.restore()\n}\n","import React, { useState, useRef, useEffect } from 'react'\n\nimport ReactCrop, {\n  centerCrop,\n  makeAspectCrop,\n  Crop,\n  PixelCrop,\n} from 'react-image-crop'\nimport { canvasPreview } from './canvasPreview'\n\nimport 'react-image-crop/dist/ReactCrop.css'\n\n// This is to demonstate how to make and center a % aspect crop\n// which is a bit trickier so we use some helper functions.\nfunction centerAspectCrop(\n  mediaWidth: number,\n  mediaHeight: number,\n  aspect: number,\n) {\n  return centerCrop(\n    makeAspectCrop(\n      {\n        unit: '%',\n        width: 90,\n      },\n      aspect,\n      mediaWidth,\n      mediaHeight,\n    ),\n    mediaWidth,\n    mediaHeight,\n  )\n}\n\nexport default function App() {\n  const [imgSrc, setImgSrc] = useState('')\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null)\n  const imgRef = useRef<HTMLImageElement>(null)\n  const [crop, setCrop] = useState<Crop>()\n  const [completedCrop, setCompletedCrop] = useState<PixelCrop>()\n  const [scale, setScale] = useState(1)\n  const [rotate, setRotate] = useState(0)\n  const [aspect, setAspect] = useState<number | undefined>(16 / 9)\n\n  function onSelectFile(e: React.ChangeEvent<HTMLInputElement>) {\n    if (e.target.files && e.target.files.length > 0) {\n      setCrop(undefined) // Makes crop preview update between images.\n      const reader = new FileReader()\n      reader.addEventListener('load', () =>\n        setImgSrc(reader.result?.toString() || ''),\n      )\n      reader.readAsDataURL(e.target.files[0])\n    }\n  }\n\n  function onImageLoad(e: React.SyntheticEvent<HTMLImageElement>) {\n    if (aspect) {\n      const { width, height } = e.currentTarget\n      setCrop(centerAspectCrop(width, height, aspect))\n    }\n  }\n\nfunction useDebounceEffect(\n  fn: () => void,\n  waitTime: number,\n  deps?: any,\n) {\n  useEffect(() => {\n    const t = setTimeout(() => {\n      fn.apply(undefined, deps)\n    }, waitTime)\n\n    return () => {\n      clearTimeout(t)\n    }\n  }, [deps, fn, waitTime])\n}\n\n\n\n  useDebounceEffect(\n    async () => {\n      if (\n        completedCrop?.width &&\n        completedCrop?.height &&\n        imgRef.current &&\n        previewCanvasRef.current\n      ) {\n        // We use canvasPreview as it's much faster than imgPreview.\n        canvasPreview(\n          imgRef.current,\n          previewCanvasRef.current,\n          completedCrop,\n          scale,\n          rotate,\n        )\n      }\n    },\n    100,\n    [completedCrop, scale, rotate],\n  )\n\n  function handleToggleAspectClick() {\n    if (aspect) {\n      setAspect(undefined)\n    } else if (imgRef.current) {\n      const { width, height } = imgRef.current\n      setAspect(16 / 9)\n      setCrop(centerAspectCrop(width, height, 16 / 9))\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"Crop-Controls\">\n        <input type=\"file\" accept=\"image/*\" onChange={onSelectFile} />\n        <div>\n          <label htmlFor=\"scale-input\">Scale: </label>\n          <input\n            id=\"scale-input\"\n            type=\"number\"\n            step=\"0.1\"\n            value={scale}\n            disabled={!imgSrc}\n            onChange={(e) => setScale(Number(e.target.value))}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"rotate-input\">Rotate: </label>\n          <input\n            id=\"rotate-input\"\n            type=\"number\"\n            value={rotate}\n            disabled={!imgSrc}\n            onChange={(e) =>\n              setRotate(Math.min(180, Math.max(-180, Number(e.target.value))))\n            }\n          />\n        </div>\n        <div>\n          <button onClick={handleToggleAspectClick}>\n            Toggle aspect {aspect ? 'off' : 'on'}\n          </button>\n        </div>\n      </div>\n      {Boolean(imgSrc) && (\n        <ReactCrop\n          crop={crop}\n          onChange={(_, percentCrop) => setCrop(percentCrop)}\n          onComplete={(c) => setCompletedCrop(c)}\n          aspect={aspect}\n        >\n          <img\n            ref={imgRef}\n            alt=\"Crop me\"\n            src={imgSrc}\n            style={{ transform: `scale(${scale}) rotate(${rotate}deg)` }}\n            onLoad={onImageLoad}\n          />\n        </ReactCrop>\n      )}\n      <div>\n        {Boolean(completedCrop) && (\n          <canvas\n            ref={previewCanvasRef}\n            style={{\n              border: '1px solid black',\n              objectFit: 'contain',\n              width: completedCrop?.width,\n              height: completedCrop?.height,\n            }}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport './index.css'\nconst rootElement = document.getElementById('root')\nReactDOM.render(<App />, rootElement)\n"],"sourceRoot":""}